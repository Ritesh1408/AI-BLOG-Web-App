name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Backend Image
        run: |
          docker build -t rr1408/aiblog-backend:latest ./backend
          docker push rr1408/aiblog-backend:latest

      - name: Build and Push Frontend Image
        run: |
          docker build -t rr1408/aiblog-frontend:latest ./frontend
          docker push rr1408/aiblog-frontend:latest

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            if ! command -v docker compose &> /dev/null; then
              sudo apt update
              sudo apt install docker-compose-plugin -y
            fi

            if [ ! -d "AI-BLOG-Web-App" ]; then
              git clone https://github.com/Ritesh1408/AI-BLOG-Web-App.git
            fi

            cd AI-BLOG-Web-App
            git pull origin main

            echo "$BACKEND_ENV" > backend/.env
            echo "$FRONTEND_ENV" > frontend/.env.production

            docker compose down --remove-orphans
            docker compose pull
            docker compose up -d
          EOF
        env:
          BACKEND_ENV: ${{ secrets.BACKEND_ENV }}
          FRONTEND_ENV: ${{ secrets.FRONTEND_ENV }}
